#!/usr/bin/env bash

echo "Running ${BASH_SOURCE[0]}"

export PATH_DIR_ARGMAP_SRC=$WORKSPACE/src
export ENV_FILE="$WORKSPACE/environment.yml"

# Adds lua folder to start of PATH so lua files called from there instead of /opt/miniconda3/envs/argmap/bin/argmap2mup
export PATH_DIR_ARGMAP_LUA="$PATH_DIR_ARGMAP_SRC/lua"
export PATH="$PATH_DIR_ARGMAP_LUA:$PATH"

# Uses variable set in conda env, or defaults to pwd.
# TODO: this still isn't great, assumes you are in argmap folder when called.
#   Plus they will outlast any env deactivation
export DIR_MJS="mapjs"

export PATH_MJS_HOME="$WORKSPACE/$DIR_MJS"
export DIR_PUBLIC="public"
export PATH_DIR_PUBLIC=$PATH_MJS_HOME/$DIR_PUBLIC
export PORT_DEV_SERVER=9001 # to keep separate from default.
export PORT_DEBUG=9221      # to keep separate from default.

# Covered in default config.env
# DIR_PROJECTS=$(dirname "$WORKSPACE")
# export DIR_PROJECTS

export PANDOC_DATA_DIR="$CONDA_PREFIX/share/pandoc"

# Advantage of $DIR_CHROME_PROFILE_TEMP is that its separate profile from that used by other projects.
# And its random each time.
# DIR_CHROME_PROFILE_TEMP=$(mktemp -d)
# But I think it's better to re-use the same profile so I can have consistent settings.
export PATH_CHROME_PROFILE_DEBUG=$PATH_MISC_DEV/chrome-debug-argmap
export ENV_FILE="$WORKSPACE/environment.yml"

# LUA
# Have removed from conda env
export LUA_PATH="$PATH_DIR_ARGMAP_LUA/?.lua;$WORKSPACE/lua_modules/share/lua/5.3/?.lua;$WORKSPACE/lua_modules/share/lua/5.3/?/init.lua;"
# LUA_PATH+="/opt/miniconda3/envs/argmap/share/lua/5.3/?.lua;/opt/miniconda3/envs/argmap/share/lua/5.3/?/init.lua;./?.lua;./?/init.lua;"
export LUA_CPATH="$WORKSPACE/lua_modules/lib/lua/5.3/?.so;"
# LUA_CPATH+="/opt/miniconda3/envs/argmap/lib/lua/5.3/?.so;/opt/miniconda3/envs/argmap/lib/lua/5.3/loadall.so;./?.so;"

# PANDOC
export LANGUAGE_PANDOC=en
export PATH_DIR_LAYOUTS=$PATH_DIR_ARGMAP_SRC/layouts
export PATH_DIR_TEMPLATES=$PATH_DIR_ARGMAP_SRC/layouts/templates
export PATH_DIR_INCLUDES=$PATH_DIR_LAYOUTS/includes
export PATH_INCLUDES_ARGMAP_CONTAINER=$PATH_DIR_INCLUDES/mapjs-map-container.html
export PATH_INCLUDES_ARGMAP_CONTROLS=$PATH_DIR_INCLUDES/mapjs-widget-controls.html
export FILE_TEMPLATE_HTML_ARGMAP_MAIN=$PATH_DIR_LAYOUTS/templates/pandoc-mapjs-main-html5.html

## TESTING INIT

# TODO: could move to separate test/init_script_argmap_test file
export PATH_TEST_LOG="$HOME/git_projects/misc/tests_output.txt"
export INPUT_FILE_YML=$WORKSPACE/test/input/example1-clearly-false-white-swan-simplified.yml
export INPUT_FILE_YML_NOTES=$WORKSPACE/examples/example-2.yml
export INPUT_FILE_JSON=$WORKSPACE/test/input/mapjs-json/example1-clearly-false-white-swan-simplified.json
export INPUT_FILE_MD0=$WORKSPACE/test/input/markdown/example1-clearly-false-white-swan-simplified-0mapjs.md
export INPUT_FILE_MD=$WORKSPACE/test/input/markdown/example1-clearly-false-white-swan-simplified-1mapjs.md
export INPUT_FILE_MD2=$WORKSPACE/test/input/markdown/example1-clearly-false-white-swan-simplified-2mapjs.md
export INPUT_FILE_MD_META=$WORKSPACE/test/input/markdown/example1-clearly-false-white-swan-simplified-meta-mapjs.md
export INPUT_FILE_JSON2=$WORKSPACE/test/input/mapjs-json/example2-clearly-false-white-swan-v3.mup
export INPUT_FILE_JSON_LINKS=$WORKSPACE/test/input/mapjs-json/example1-clearly-false-white-swan-simplified-with-links.json

PATH_INPUT_FILE_HTML=$(realpath --no-symlinks --relative-to="$PATH_DIR_PUBLIC" "$PATH_DIR_PUBLIC/input/example1-clearly-false-white-swan-simplified.html")
export PATH_INPUT_FILE_HTML
PATH_OUTPUT_FILE_HTML=$(realpath --no-symlinks --relative-to="$PATH_DIR_PUBLIC" "$PATH_DIR_PUBLIC/output/html/example1-clearly-false-white-swan-simplified.html")
export PATH_OUTPUT_FILE_HTML
