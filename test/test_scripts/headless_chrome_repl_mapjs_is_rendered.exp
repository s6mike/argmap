#!/usr/bin/env -S expect -f

# This Expect script was generated by autoexpect on Wed Aug 24 20:48:10 2022
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don

# Reads first passed argument
set PATH_INPUT_FILE_HTML [lindex $argv 0];
set PATH_LOG_FILE_EXPECT [lindex $argv 1];
set PORT_DEV_SERVER [lindex $argv 2];

# Sets the crash dumps dir for chrome to ~/tmp
# variable path_tmp_folder [file dirname $PATH_LOG_FILE_EXPECT]/../../tmp
variable path_tmp_folder /tmp

# Default logfile value
if {$PATH_LOG_FILE_EXPECT eq ""} {set PATH_LOG_FILE_EXPECT /home/s6mike/git_projects/expect_log.txt};

log_file -a $PATH_LOG_FILE_EXPECT;

# This means output won't show up in terminal but it will be available using VAR=$(SCRIPT_NAME)
log_user 0

# Was -1, meaning no timeout
set timeout 2

# Switch comments if want to see browser run:
#	 Can see command in console, however expect script won't work so this will always fail.
# spawn /opt/google/chrome/chrome --repl --crash-dumps-dir=$path_tmp_folder http://localhost:$PORT_DEV_SERVER/$PATH_INPUT_FILE_HTML
spawn /opt/google/chrome/chrome --headless --repl --crash-dumps-dir=$path_tmp_folder http://localhost:$PORT_DEV_SERVER/$PATH_INPUT_FILE_HTML

match_max 100000
expect -exact ">>> "
sleep .1

# TODO: Could check for more than one thing, or execute interactive JS 
# TODO Could also try to pass the number of nodes onto next step to check that the interaction gave the correct result
# TODO: Read class from config file: node.class
send -- "document.getElementsByClassName('mapjs-node').length>=1\r"
expect -exact "document.getElementsByClassName('mapjs-node').length>=1\r"
expect -re "{\"result\":{\"type\":\"boolean\",\"value\":(true|false)}}\r"
# {\"result\":{\"description\":\"12\",\"type\":\"number\",\"value\":12}}\r
expect -exact ">>> "
send -- "quit\r"
# expect -- ">>> quit\r"
expect -- "quit\r"
# Boolean result is echoed to stdout, won't show in terminal but can be captured in variable using VAR=$(SCRIPT_NAME)
send_user -- "$expect_out(1,string)"
send -- "\r"